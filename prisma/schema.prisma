// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
  BANNED
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.Text
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  bio           String?   @db.Text
  password      String?
  role          UserRole  @default(USER)

  image String?
  cover String?

  createdCommunities Community[] @relation("CreatedBy")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Likes         Likes[]
  followedBy    User[]         @relation("UserFollows")
  following     User[]         @relation("UserFollows")
  subscriptions Subscription[]

  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")
  conversation           Conversation[]
  reports                Reports[]

  @@index([username, email])
}

model Post {
  id       String  @id @default(cuid())
  text     String? @db.Text
  content  Json?
  author   User    @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  likes     Likes[]

  parentId    String?
  parent      Post?      @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Post[]     @relation("ParentChildren")
  communityId String?
  community   Community? @relation(fields: [communityId], references: [id])
  images      Images[]
  reports     Reports[]
  deleted     Boolean    @default(false)

  @@index([parentId])
  @@index([authorId])
  @@index([communityId])
}

model Reports {
  id     String @id @default(cuid())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now()) @map("created_at")
  resolved  Boolean  @default(false)

  @@index([postId])
  @@index([userId])
}

model Images {
  id     String @id @default(cuid())
  url    String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Likes {
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Community {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  creatorId    String?
  creator      User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  Post         Post[]
  Subscription Subscription[]

  @@index([name])
  @@index([creatorId])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  @@id([userId, communityId])
  @@index([userId])
  @@index([communityId])
}

model Conversation {
  id String @id @default(uuid())

  userOneId String
  userOne   User   @relation("MemberOne", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId String
  userTwo   User   @relation("MemberTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]
  User           User?           @relation(fields: [userId], references: [id])
  userId         String?

  @@unique([userOneId, userTwoId])
  @@index([userTwoId])
  @@index([userId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([conversationId])
}
